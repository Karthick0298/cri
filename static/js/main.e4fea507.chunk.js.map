{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","class","src","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,4IC8E5BC,G,6LAxEJ,IAAD,MACN,OACF,yBAAKC,MAAM,kBAGX,gCAEC,yBAAKC,IAAI,sBAKV,yBAAKD,MAAM,aAGV,yBAAKA,MAAM,UAEV,yBAAKC,IAAI,mBAIV,yBAAKD,MAAM,WAEV,yBAAKA,MAAM,WACV,+GAEA,4BACC,wMACA,oQAGF,yBAAKA,MAAM,UAEV,yBAAKC,IAAI,kBACT,kEAAuC,yEAAvC,wLAGF,yBAAKD,MAAM,UAEV,yLAEA,yBAAKC,IAAI,kBAET,mEAAyC,IAAzC,wBAAmE,IAAnE,sCAED,yBAAKD,MAAM,SAEV,uFAEA,yCACW,IADX,YACwB,0BAAME,MAAM,OAAZ,OADxB,UAC2D,0BAAMA,MAAM,OAAZ,OAD3D,SAC8F,IAD9F,gBAC+G,0BAAMA,MAAM,OAAZ,OAD/G,SACkJ,IADlJ,QAC2J,0BAAMA,MAAM,OAAZ,OAD3J,UAEH,0BAAMA,MAAM,OAAZ,OAFG,WAEkC,IAFlC,iBAEoD,0BAAMA,MAAM,OAAZ,OAFpD,UAEwF,IAFxF,QAGH,0BAAMA,MAAM,OAAZ,OAHG,WAGkC,IAHlC,YAG+C,0BAAMA,MAAM,OAAZ,OAH/C,UAGmF,IAHnF,UAG8F,0BAAMA,MAAM,OAAZ,OAH9F,SAGiI,IAHjI,aAG+I,0BAAMA,MAAM,OAAZ,OAH/I,iBAG0L,IAH1L,cAIH,0BAAMA,MAAM,OAAZ,OAJG,SAI+B,0BAAMA,MAAM,OAAZ,OAJ/B,YAIoE,0BAAMA,MAAM,OAAZ,OAJpE,SAIsG,0BAAMA,MAAM,OAAZ,OAJtG,kBAIiJ,0BAAMA,MAAM,OAAZ,OAJjJ,gBAI2L,IAJ3L,iBAUJ,yBAAKF,MAAM,kBACT,4BAAKA,MAAM,aAAX,sBAA6B,eAA7B,sBAAkD,UAAlD,8BACA,4BAAKA,MAAM,aAAX,sBAA6B,yBAA7B,sBAA6D,UAA7D,gCACA,4BAAKA,MAAM,aAAX,sBAA6B,gBAA7B,sBAAoD,UAApD,+B,GA/DgBG,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4fea507.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends Component {\n  render(){\n    return (\n\t\t<div class=\"full-container\">\n\n\n\t\t<header>\n\n\t\t\t<img src=\"asserts/logo.png\"/>\n\t\t\t\n\t\t</header>\n\n\n\t\t<div class=\"container\">\n\n\n\t\t\t<div class=\"shield\">\n\n\t\t\t\t<img src=\"asserts/1.png\"/>\n\t\t\t\t\n\t\t\t</div>\n\n\t\t\t<div class=\"content\">\n\n\t\t\t\t<div class=\"details\">\n\t\t\t\t\t<h2>C.R.I. PUMPS WINS THE NATIONAL ENERGY CONSERVATION AWARD 2018 for the 4th time.</h2>\n\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>C.R.I.'s energy efficient products are well recognized by various Government Institutions, as trustworthy products for various projects across the globe to save energy.</li>\n\t\t\t\t\t\t<li>C.R.I. is the highest contributor in the country for the projects of EESL (Energy Efficiency Services Limited) to replace the old inefficient pumps with 5 Star rated energy efficient smart pumps with IoT enabled control panel.</li>\n\t\t\t\t\t</ul>\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"banner\">\n\n\t\t\t\t\t<img src=\"asserts/2.png\"/>\n\t\t\t\t\t<p>Government of India has awarded the <b>\"National Energy Conservation Award 2018\".</b> Mr. G. Selvaraj, Joint Managing Director of C.R.I. Group received the award from Smt. Sumitra Mahajan, Speaker of Lok Sabha & Shri. Raj Kumar Singh, Honorable Minister of State.</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"models\">\n\n\t\t\t\t<h4>INSTALLED OVER 10 LAKHS STAR RATED PUMPSETS ACROSS THE COUNTRY RESULTING IN A CUMULATIVE SAVING OF MORE THAN 9,000 MILLION UNITS OF POWER FOR THE NATION.</h4>\n\n\t\t\t\t<img src=\"asserts/3.png\"/>\n\n\t\t\t\t<h3>Valves - Pumps - Pipes - IoT Drives {\"&\"} Controllers - Wires {\"&\"} Cables - Solar Systems - Motors </h3>\t\n\t\t\t</div>\n\t\t\t<div class=\"links\">\n\n\t\t\t\t<h4>C.R.I. FLUID SYSTEMS PRODUCTS CATER TO DIVERSE SEGMENTS</h4>\n\n\t\t\t\t<h4>\n\t\t\t\tCHEMICALS {\"&\"} PROCESS <font color=\"red\"> | </font> POWER <font color=\"red\"> | </font>WATER {\"&\"} WASTE WATER <font color=\"red\"> | </font> OILS {\"&\"} GAS <font color=\"red\"> | </font> PHARMA \n\t<font color=\"red\"> | </font> SUGARS {\"&\"} DISTILLERIES <font color=\"red\"> | </font> PAPER {\"&\"} PULP\n\t<font color=\"red\"> | </font> MARINE {\"&\"} DEFENCE <font color=\"red\"> | </font> METAL {\"&\"}MINING <font color=\"red\"> | </font> FOOD {\"&\"} BEVERAGE <font color=\"red\"> | </font>PETROCHEMICAL {\"&\"} REFINERIES \n\t<font color=\"red\"> | </font>SOLAR <font color=\"red\"> | </font>BUILDING <font color=\"red\"> | </font> HVAC <font color=\"red\"> | </font> FIRE FIGHTING <font color=\"red\"> | </font> AGRICULTURE {\"&\"} RESIDENTIAL\n\t</h4>\n\n\t\t\t</div>\t\t\t\n\n\t\t\t\n<div class=\"grid-container\">\n  <div class=\"grid-item\" class=\"fa fa-phone\" align= \"center\">Toll free 1800 200 1234</div>\n  <div class=\"grid-item\" class=\"fa fa-facebook-square\" align = \"center\">www.facebook.com/cripumps</div>\n  <div class=\"grid-item\" class=\"fas fa-globe\" align = \"center\">www.crigroups.com</div>  \n  \n</div>\n\n\t\t</div>\n\t</div>\n\t\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}